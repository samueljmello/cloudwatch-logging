# Set-up template
AWSTemplateFormatVersion: 2010-09-09
Description: Template for creating EC2 instances reporting to custom LogGroups.
Parameters:
  MyIp:
    Type: String
  PemKey:
    Type: String
  InstanceType:
    Type: String
    Default: t2.micro
  Image:
    Type: AWS::EC2::Image::Id
    Default: ami-0323c3dd2da7fb37d

# Resource creation
Resources: 

  # Creates a security group controlling access to the EC2 instance.
  Ec2CloudWatchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows SSH & Web
      SecurityGroupIngress:
      - CidrIp: !Sub "${MyIp}/32"
        Description: Allow to home
        IpProtocol: Tcp
        FromPort: 22
        ToPort: 22
      - CidrIp: !Sub "${MyIp}/32"
        Description: Allow web interface
        IpProtocol: Tcp
        FromPort: 80
        ToPort: 80


  # Creates a role for the EC2 instance that the instance profile will reference.
  Ec2CloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  # Creates the instance profile for the EC2 instance to use.
  Ec2CloudWatchInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref Ec2CloudWatchRole


  # Creates the EC2 instance.
  Ec2CloudWatchInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref Image
      KeyName: !Ref PemKey
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !GetAtt Ec2CloudWatchSecurityGroup.GroupId
      IamInstanceProfile: !Ref Ec2CloudWatchInstanceProfile
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  
  # Create custom log groups
  CloudWatchApacheErrorLogs:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: apache/error
      RetentionInDays: 14
  CloudWatchApacheAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: apache/access
      RetentionInDays: 14

  
  # Create metric filters for graphing
  CloudWatchApacheAccessGetMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties: 
      FilterPattern: '{ $.method = "GET" }'
      LogGroupName: !Ref CloudWatchApacheAccessLogs
      MetricTransformations: 
        - MetricNamespace: Apache
          MetricName: GET Requests
          MetricValue: '1'
  CloudWatchApacheAccessPutMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties: 
      FilterPattern: '{ $.method = "PUT" }'
      LogGroupName: !Ref CloudWatchApacheAccessLogs
      MetricTransformations: 
        - MetricNamespace: Apache
          MetricName: PUT Requests
          MetricValue: '1'
  CloudWatchApacheAccessPostMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties: 
      FilterPattern: '{ $.method = "POST" }'
      LogGroupName: !Ref CloudWatchApacheAccessLogs
      MetricTransformations: 
        - MetricNamespace: Apache
          MetricName: POST Requests
          MetricValue: '1'
  CloudWatchApacheAccessDeleteMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties: 
      FilterPattern: '{ $.method = "DELETE" }'
      LogGroupName: !Ref CloudWatchApacheAccessLogs
      MetricTransformations: 
        - MetricNamespace: Apache
          MetricName: DELETE Requests
          MetricValue: '1'
  CloudWatchApacheError200MetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties: 
      FilterPattern: '{ $.status = "200" }'
      LogGroupName: !Ref CloudWatchApacheAccessLogs
      MetricTransformations: 
        - MetricNamespace: Apache
          MetricName: '200 Status'
          MetricValue: '1'
  CloudWatchApacheError500MetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties: 
      FilterPattern: '{ $.status = "500" }'
      LogGroupName: !Ref CloudWatchApacheAccessLogs
      MetricTransformations: 
        - MetricNamespace: Apache
          MetricName: '500 Errors'
          MetricValue: '1'
  CloudWatchApacheError404MetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties: 
      FilterPattern: '{ $.status = "404" }'
      LogGroupName: !Ref CloudWatchApacheAccessLogs
      MetricTransformations: 
        - MetricNamespace: Apache
          MetricName: '404 Errors'
          MetricValue: '1'
  CloudWatchApacheError405MetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties: 
      FilterPattern: '{ $.status = "405" }'
      LogGroupName: !Ref CloudWatchApacheAccessLogs
      MetricTransformations: 
        - MetricNamespace: Apache
          MetricName: '405 Errors'
          MetricValue: '1'
  CloudWatchApacheErrorOtherMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties: 
      FilterPattern: '{ $.function != "[autoindex:error]" }'
      LogGroupName: !Ref CloudWatchApacheErrorLogs
      MetricTransformations: 
        - MetricNamespace: Apache
          MetricName: 'All Core Errors'
          MetricValue: '1'


  # Creates dashboards to display Apache data
  CloudWatchApacheDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties: 
      DashboardName: Apache
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 12,
              "width": 15,
              "height": 6,
              "properties": {
                "metrics": [
                  [
                    "Apache",
                    "404 Errors",
                    {
                      "color": "#7f7f7f",
                      "label": "404 - Not Found"
                    }
                  ],
                  [
                    ".",
                    "500 Errors",
                    {
                      "label": "500 - Server Error",
                      "color": "#d62728"
                    }
                  ],
                  [
                    ".",
                    "405 Errors",
                    {
                      "yAxis": "left",
                      "color": "#ff7f0e",
                      "label": "405 - Method Not Allowed"
                    }
                  ],
                  [
                    ".",
                    "200 Status",
                    {
                      "color": "#2ca02c",
                      "label": "200 - OK"
                    }
                  ]
                ],
                "view": "timeSeries",
                "stacked": true,
                "region": "${AWS::Region}",
                "title": "Status Timeline",
                "stat": "Sum",
                "period": 10
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 9,
              "height": 6,
              "properties": {
                "metrics": [
                  [
                    "Apache",
                    "GET Requests",
                    {
                      "label": "GET"
                    }
                  ],
                  [
                    ".",
                    "PUT Requests",
                    {
                      "label": "PUT"
                    }
                  ],
                  [
                    ".",
                    "POST Requests",
                    {
                      "label": "POST"
                    }
                  ],
                  [
                    ".",
                    "DELETE Requests",
                    {
                      "label": "DELETE"
                    }
                  ]
                ],
                "view": "singleValue",
                "region": "${AWS::Region}",
                "period": 86400,
                "stat": "Sum",
                "title": "Method Totals"
              }
            },
            {
              "type": "metric",
              "x": 9,
              "y": 0,
              "width": 15,
              "height": 6,
              "properties": {
                "metrics": [
                  [
                    "Apache",
                    "GET Requests",
                    {
                      "label": "GET"
                    }
                  ],
                  [
                    ".",
                    "PUT Requests",
                    {
                      "label": "PUT"
                    }
                  ],
                  [
                    ".",
                    "POST Requests",
                    {
                      "label": "POST"
                    }
                  ],
                  [
                    ".",
                    "DELETE Requests",
                    {
                      "label": "DELETE"
                    }
                  ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Sum",
                "period": 10,
                "title": "Method Timeline"
              }
            },
            {
              "type": "metric",
              "x": 15,
              "y": 12,
              "width": 9,
              "height": 6,
              "properties": {
                "metrics": [
                  [
                    "Apache",
                    "404 Errors",
                    {
                      "color": "#7f7f7f",
                      "label": "404"
                    }
                  ],
                  [
                    ".",
                    "500 Errors",
                    {
                      "color": "#d62728",
                      "label": "500"
                    }
                  ],
                  [
                    ".",
                    "405 Errors",
                    {
                      "color": "#ff7f0e",
                      "label": "405"
                    }
                  ],
                  [
                    ".",
                    "200 Status",
                    {
                      "color": "#2ca02c",
                      "label": "200"
                    }
                  ]
                ],
                "view": "singleValue",
                "region": "${AWS::Region}",
                "stat": "Sum",
                "period": 3600,
                "title": "Status Totals"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 18,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE 'apache/error' | fields time, function, message\n| sort time desc\n| limit 20",
                "region": "${AWS::Region}",
                "stacked": false,
                "title": "Last 20 Error Log Entries",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE 'apache/access' | fields time, method, remoteIP, request, status, host, userAgent\n| sort time desc\n| limit 20",
                "region": "${AWS::Region}",
                "stacked": false,
                "title": "20 Most Recent Requests",
                "view": "table"
              }
            }
          ]
        }

  # Creates the config file for CloudWatch agent as an SSM parameter
  CloudWatchAgentConfigParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: | 
        {
          "agent": {
            "metrics_collection_interval": 10,
            "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
          },
          "metrics": {
            "metrics_collected": {
              "cpu": {
                "resources": [
                  "*"
                ],
                "measurement": [
                  {"name": "cpu_usage_idle", "rename": "CPU_USAGE_IDLE", "unit": "Percent"},
                  {"name": "cpu_usage_nice", "unit": "Percent"},
                  "cpu_usage_guest"
                ],
                "totalcpu": false,
                "metrics_collection_interval": 10,
                "append_dimensions": {
                  "customized_dimension_key_1": "customized_dimension_value_1",
                  "customized_dimension_key_2": "customized_dimension_value_2"
                }
              },
              "disk": {
                "resources": [
                  "/",
                  "/tmp"
                ],
                "measurement": [
                  {"name": "free", "rename": "DISK_FREE", "unit": "Gigabytes"},
                  "total",
                  "used"
                ],
                  "ignore_file_system_types": [
                  "sysfs", "devtmpfs"
                ],
                "metrics_collection_interval": 60,
                "append_dimensions": {
                  "customized_dimension_key_3": "customized_dimension_value_3",
                  "customized_dimension_key_4": "customized_dimension_value_4"
                }
              },
              "diskio": {
                "resources": [
                  "*"
                ],
                "measurement": [
                  "reads",
                  "writes",
                  "read_time",
                  "write_time",
                  "io_time"
                ],
                "metrics_collection_interval": 60
              },
              "swap": {
                "measurement": [
                  "swap_used",
                  "swap_free",
                  "swap_used_percent"
                ]
              },
              "mem": {
                "measurement": [
                  "mem_used",
                  "mem_cached",
                  "mem_total"
                ],
                "metrics_collection_interval": 1
              },
              "net": {
                "resources": [
                  "eth0"
                ],
                "measurement": [
                  "bytes_sent",
                  "bytes_recv",
                  "drop_in",
                  "drop_out"
                ]
              },
              "netstat": {
                "measurement": [
                  "tcp_established",
                  "tcp_syn_sent",
                  "tcp_close"
                ],
                "metrics_collection_interval": 60
              },
              "processes": {
                "measurement": [
                  "running",
                  "sleeping",
                  "dead"
                ]
              }
            },
            "append_dimensions": {
              "ImageId": "${aws:ImageId}",
              "InstanceId": "${aws:InstanceId}",
              "InstanceType": "${aws:InstanceType}",
              "AutoScalingGroupName": "${aws:AutoScalingGroupName}"
            },
            "aggregation_dimensions" : [["ImageId"], ["InstanceId", "InstanceType"], ["d1"],[]],
            "force_flush_interval" : 30
          },
          "logs": {
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/var/log/www/error/*",
                    "log_group_name": "apache/error",
                    "log_stream_name": "[{instance_id}]",
                    "timezone": "UTC"
                  },
                  {
                    "file_path": "/var/log/www/access/*",
                    "log_group_name": "apache/access",
                    "log_stream_name": "[{instance_id}]",
                    "timezone": "UTC"
                  }
                ]
              }
            },
            "log_stream_name": "[{instance_id}]",
            "force_flush_interval" : 15
          }
        }
      Description: SSM Parameter for configuring CloudWatch Agent.


  # Creates an automation document for installing & configuring the CloudWatch agent and Apache.
  CloudWatchCustomLoggingAutomation:
    Type: AWS::SSM::Document
    Properties: 
      DocumentType: Command
      Content: 
        schemaVersion: "2.2"
        description: "Automates the installation & configuration of the CloudWatch agent and Apache."
        mainSteps:
          - name: InstallCloudWatch
            description: Installs the CloudWatch agent using the document 'AWS-ConfigureAWSPackage'.
            action: aws:runDocument
            maxAttempts: 5
            inputs:
              documentType: SSMDocument
              documentPath: AWS-ConfigureAWSPackage
              documentParameters:
                action: Install
                installationType: Uninstall and reinstall
                name: AmazonCloudWatchAgent
                version: latest
          - name: InstallAndConfigureApache
            description: Installs Apache and then configures logging for CloudWatch 
            action: aws:runShellScript
            maxAttempts: 5
            inputs:
              runCommand:
                - sudo yum update -y
                - sudo amazon-linux-extras install -y php7.2
                - sudo yum install -y httpd
                - sudo systemctl start httpd
                - sudo systemctl enable httpd
                - sudo systemctl is-enabled httpd
                - sudo cp -f /etc/httpd/conf/httpd.conf ~/httpd.back.conf
                - | 
                  FILE="/etc/httpd/conf/httpd.conf";
                  ELOG='ErrorLog "logs\/error_log"';
                  ELOGREP='ErrorLog "\/var\/log\/www\/error\/error_log"';
                  ELOGFMT='ErrorLogFormat "{\\"time\\":\\"%{%usec_frac}t\\", \\"function\\" : \\"[%-m:%l]\\", \\"process\\" : \\"[pid%P]\\" ,\\"message\\" : \\"%M\\"}"';
                  CLOG='CustomLog "logs\/access_log" combined'
                  CLOGFMT='LogFormat "%h %l %u %t \\"%r\\" %>s %b" common';
                  CWLOG='CustomLog "\/var\/log\/www\/access\/access_log" cloudwatch';
                  CWLOGFMT='LogFormat "{ \\"time\\":\\"%{%Y-%m-%d}tT%{%T}t.%{msec_frac}tZ\\", \\"process\\":\\"%D\\", \\"filename\\":\\"%f\\", \\"remoteIP\\":\\"%a\\", \\"host\\":\\"%V\\", \\"request\\":\\"%U\\", \\"query\\":\\"%q\\",\\"method\\":\\"%m\\", \\"status\\":\\"%>s\\", \\"userAgent\\":\\"%{User-agent}i\\",\\"referer\\":\\"%{Referer}i\\"}" cloudwatch';
                  sed "s/${ELOG}/${ELOGREP}/g" ${FILE} |\
                    sed "/${ELOGREP}/a ${ELOGFMT}" |\
                    sed "s/${CLOGFMT}/${CWLOGFMT}/g" |\
                    sed "/${CLOG}/a ${CWLOG}" |\
                    sudo dd of=${FILE};
                - sudo mkdir -p /var/log/www/error
                - sudo mkdir -p /var/log/www/access
                - sudo systemctl restart httpd
                - echo "success" | sudo dd of=/var/www/html/index.html
                - echo '<?php throw new Exception("Nooooooooooooooo!"); ?>' | sudo dd of=/var/www/html/500error.php
          - name: ConfigureCloudWatch
            description: Configures the CloudWatch agent using the document 'AmazonCloudWatch-ManageAgent'.
            action: aws:runDocument
            maxAttempts: 5
            inputs:
              documentType: SSMDocument
              documentPath: AmazonCloudWatch-ManageAgent
              documentParameters:
                action: configure
                mode: ec2
                optionalConfigurationSource: ssm
                optionalConfigurationLocation: !Ref CloudWatchAgentConfigParameter
                optionalRestart: "yes" # DO NOT REMOVE QUOTES
  

  # Creates association which is reponsible for running CloudWatch agent install.
  CloudWatchAgentInstallAssociation:
    Type: AWS::SSM::Association
    Properties: 
      Name: !Ref CloudWatchCustomLoggingAutomation
      Targets: 
        - Key: InstanceIds
          Values: 
            - !Ref Ec2CloudWatchInstance

# Establish outputs
Outputs:
  ApacheServerHost:
    Description: The DNS name of the Apache server created (for use in generating traffic)
    Value: !GetAtt Ec2CloudWatchInstance.PublicDnsName