AWSTemplateFormatVersion: 2010-09-09
Description: Template for creating EC2 instances reporting to custom LogGroups.
Parameters:
  MyIp:
    Type: String
  PemKey:
    Type: String
  InstanceType:
    Type: String
    Default: t2.micro
  Image:
    Type: AWS::EC2::Image::Id
    Default: ami-0323c3dd2da7fb37d
Resources: 

  # Creates the config file for CloudWatch agent
  CloudWatchAgentConfigParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: CloudWatchAgentConfig
      Type: String
      Value: | 
        {
          "agent": {
            "metrics_collection_interval": 10,
            "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
          },
          "metrics": {
            "metrics_collected": {
              "cpu": {
                "resources": [
                  "*"
                ],
                "measurement": [
                  {"name": "cpu_usage_idle", "rename": "CPU_USAGE_IDLE", "unit": "Percent"},
                  {"name": "cpu_usage_nice", "unit": "Percent"},
                  "cpu_usage_guest"
                ],
                "totalcpu": false,
                "metrics_collection_interval": 10,
                "append_dimensions": {
                  "customized_dimension_key_1": "customized_dimension_value_1",
                  "customized_dimension_key_2": "customized_dimension_value_2"
                }
              },
              "disk": {
                "resources": [
                  "/",
                  "/tmp"
                ],
                "measurement": [
                  {"name": "free", "rename": "DISK_FREE", "unit": "Gigabytes"},
                  "total",
                  "used"
                ],
                  "ignore_file_system_types": [
                  "sysfs", "devtmpfs"
                ],
                "metrics_collection_interval": 60,
                "append_dimensions": {
                  "customized_dimension_key_3": "customized_dimension_value_3",
                  "customized_dimension_key_4": "customized_dimension_value_4"
                }
              },
              "diskio": {
                "resources": [
                  "*"
                ],
                "measurement": [
                  "reads",
                  "writes",
                  "read_time",
                  "write_time",
                  "io_time"
                ],
                "metrics_collection_interval": 60
              },
              "swap": {
                "measurement": [
                  "swap_used",
                  "swap_free",
                  "swap_used_percent"
                ]
              },
              "mem": {
                "measurement": [
                  "mem_used",
                  "mem_cached",
                  "mem_total"
                ],
                "metrics_collection_interval": 1
              },
              "net": {
                "resources": [
                  "eth0"
                ],
                "measurement": [
                  "bytes_sent",
                  "bytes_recv",
                  "drop_in",
                  "drop_out"
                ]
              },
              "netstat": {
                "measurement": [
                  "tcp_established",
                  "tcp_syn_sent",
                  "tcp_close"
                ],
                "metrics_collection_interval": 60
              },
              "processes": {
                "measurement": [
                  "running",
                  "sleeping",
                  "dead"
                ]
              }
            },
            "append_dimensions": {
              "ImageId": "${aws:ImageId}",
              "InstanceId": "${aws:InstanceId}",
              "InstanceType": "${aws:InstanceType}",
              "AutoScalingGroupName": "${aws:AutoScalingGroupName}"
            },
            "aggregation_dimensions" : [["ImageId"], ["InstanceId", "InstanceType"], ["d1"],[]],
            "force_flush_interval" : 30
          },
          "logs": {
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/var/log/www/error/*",
                    "log_group_name": "apache/error",
                    "log_stream_name": "[{instance_id}]",
                    "timezone": "UTC"
                  },
                  {
                    "file_path": "/var/log/www/access/*",
                    "log_group_name": "apache/access",
                    "log_stream_name": "[{instance_id}]",
                    "timezone": "UTC"
                  }
                ]
              }
            },
            "log_stream_name": "[{instance_id}]",
            "force_flush_interval" : 15
          }
        }
      Description: SSM Parameter for configuring CloudWatch Agent.


  # Creates a security group controlling access to the EC2 instance.
  Ec2CloudWatchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows SSH & Web
      SecurityGroupIngress:
      - CidrIp: !Sub "${MyIp}/32"
        Description: Allow to home
        IpProtocol: Tcp
        FromPort: 22
        ToPort: 22
      - CidrIp: !Sub "${MyIp}/32"
        Description: Allow web interface
        IpProtocol: Tcp
        FromPort: 80
        ToPort: 80


  # Creates a role for the EC2 instance that the instance profile will reference.
  Ec2CloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  # Creates the instance profile for the EC2 instance to use.
  Ec2CloudWatchInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref Ec2CloudWatchRole

  # Creates a service role for SSM document automation execution (required)
  CloudWatchAutomationServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ssm.amazonaws.com
            - ec2.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole


  # Creates the EC2 instance.
  Ec2CloudWatchInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init: 
        config: 
          commands:
            001UpdateOS:
              command: |
                sudo yum update -y
              cwd: "~"
              ignoreErrors: "false"
            002InstallPHPApache:
              command: |
                sudo amazon-linux-extras install -y php7.2;
                sudo yum install -y httpd;
                sudo systemctl start httpd;
                sudo systemctl enable httpd;
                sudo systemctl is-enabled httpd;
              cwd: "~"
              ignoreErrors: "false"
            003ConfigureApache:
              command: |
                sudo cp -f /etc/httpd/conf/httpd.conf ~/httpd.back.conf
                FILE="/etc/httpd/conf/httpd.conf";
                ELOG='ErrorLog "logs\/error_log"';
                ELOGREP='ErrorLog "\/var\/log\/www\/error\/error_log"';
                ELOGFMT='ErrorLogFormat "{\\"time\\":\\"%{%usec_frac}t\\", \\"function\\" : \\"[%-m:%l]\\", \\"process\\" : \\"[pid%P]\\" ,\\"message\\" : \\"%M\\"}"';
                CLOG='CustomLog "logs\/access_log" combined'
                CLOGFMT='LogFormat "%h %l %u %t \\"%r\\" %>s %b" common';
                CWLOG='CustomLog "\/var\/log\/www\/access\/access_log" cloudwatch';
                CWLOGFMT='LogFormat "{ \\"time\\":\\"%{%Y-%m-%d}tT%{%T}t.%{msec_frac}tZ\\", \\"process\\":\\"%D\\", \\"filename\\":\\"%f\\", \\"remoteIP\\":\\"%a\\", \\"host\\":\\"%V\\", \\"request\\":\\"%U\\", \\"query\\":\\"%q\\",\\"method\\":\\"%m\\", \\"status\\":\\"%>s\\", \\"userAgent\\":\\"%{User-agent}i\\",\\"referer\\":\\"%{Referer}i\\"}" cloudwatch';
                sed "s/${ELOG}/${ELOGREP}/g" ${FILE} |\
                  sed "/${ELOGREP}/a ${ELOGFMT}" |\
                  sed "s/${CLOGFMT}/${CWLOGFMT}/g" |\
                  sed "/${CLOG}/a ${CWLOG}" |\
                  sudo dd of=${FILE};
                sudo mkdir -p /var/log/www/error;
                sudo mkdir -p /var/log/www/access;
                sudo systemctl restart httpd;
              cwd: "~"
              ignoreErrors: "false"
    Properties:
        ImageId: !Ref Image
        KeyName: !Ref PemKey
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !GetAtt Ec2CloudWatchSecurityGroup.GroupId
        IamInstanceProfile: !Ref Ec2CloudWatchInstanceProfile
        Tags:
          - Key: Name
            Value: !Ref AWS::StackName
        UserData:
          Fn::Base64:
            !Sub | # basic script for performing cfn-init
                #!/bin/bash -ex
                /opt/aws/bin/cfn-init -v \
                  --stack ${AWS::StackName} \
                  --resource Ec2CloudWatchInstance \
                  --region ${AWS::Region}


  # Creates an automation document for installing & configuring CloudWatch agent.
  CloudWatchAgentAutomation:
    Type: AWS::SSM::Document
    Properties: 
      Name: Custom-CloudWatchAgentInstallAndConfig
      DocumentType: Automation
      Content: 
        schemaVersion: "0.3"
        assumeRole: !GetAtt CloudWatchAutomationServiceRole.Arn
        description: "Automates the installation and configuration of the CloudWatch agent."
        mainSteps:
          - name: InstallCloudWatch
            description: Installs the CloudWatch agent using the document 'AWS-ConfigureAWSPackage'.
            action: aws:runCommand
            maxAttempts: 5
            inputs:
              DocumentName: AWS-ConfigureAWSPackage
              Parameters:
                action: 
                  - Install
                installationType: 
                  - Uninstall and reinstall
                name: 
                  - AmazonCloudWatchAgent
                version: 
                  - latest
          - name: ConfigureCloudWatch
            description: Configures the CloudWatch agent using the document 'AmazonCloudWatch-ManageAgent'.
            action: aws:runCommand
            maxAttempts: 5
            inputs:
              DocumentName: AmazonCloudWatch-ManageAgent
              Parameters:
                action: 
                  - configure
                mode: 
                  - ec2
                optionalConfigurationSource: 
                  - ssm
                optionalConfigurationLocation: 
                  - CloudWatchAgentConfig
                optionalRestart:
                  - "yes"
  
  # Creates association which is reponsible for running CloudWatch agent install.
  # CloudWatchAgentInstallAssociation:
  #   Type: AWS::SSM::Association
  #   Properties: 
  #     AssociationName: CloudWatchAgentInstallAndConfigure
  #     Name: !Ref CloudWatchAgentAutomation
  #     InstanceId: !Ref Ec2CloudWatchInstance